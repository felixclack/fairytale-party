#
# This is the example configuration file for Suprails
#

# It is important to realize that this file is essentially a ruby source file.
# Every statement that is not commented out with a '#' character, will be
# executed as a ruby expression. The most important aspect of this is that all
# string-based arguments must either be a symbol (where syntax allows) or
# enclosed in quotes. Additionally, arguments must be separated by a comma,
# just like a ruby method call.
#
# Example (will NOT work):
#   gems.update rspec rspec-rails haml
# Example (will work):
#   gems.update :rspec, "rspec-rails", :haml
#
# Also, the commands in this file are run in order. In other words, this file
# is functional, rather than declarative. If you try to update the rails gem
# after running the rails command, the update to rails will NOT take effect.

# Declare the location for your files to copy from. Let's say you have a
#   helper file you always have, and you'd like it to be installed into the
#   lib/ folder. This command defines the location of your master helper file
#   (or any other similar files). Ideally, this should be one of your first
#   commands
# Example (also the default):
sources "~/.suprails/sources"

# Declare the gems you'd like to update. Keep in mind that this will likely
#   require you to enter your root password, as sudo will probably be called
# You should probably do this before issuing the rails command
# Example:

gems.update :rspec, "rspec-rails", :haml, :capistrano, :rails

# NOTE: symbols will generally work, but if the gem has a hyphen, it needs to
#       be enclosed in quotes
#
# You could instead update all gems
# Example:
# gems.update

# There are two ways to run the rails generator: rails and frozen_rails.
# Only one should be called, so if you want frozen rails, comment out the
#   rails command
#
frozen_rails
#rails

# Now, define the gems you wish to mention in the config/environment.rb file
# Example:
gems.config :haml
gems.config :authlogic

# You can unpack the gems that you defined with gems.config by calling
#   gems.unpack
# Example:
gems.unpack

# Plugins are also available for installation.
plugin "git://github.com/thoughtbot/hoptoad_notifier.git"
plugin "http://ennerchi.googlecode.com/svn/trunk/plugins/jrails"
plugin "git://github.com/drnic/rails-footnotes.git"
plugin "git://github.com/giraffesoft/resource_controller.git"

# And you can generate stuff, too
# Example:
generate :rspec
# generate "model", "Model", "name:string"

# Creating new folders is easy. Here's one for Haml/Sass
# Example:
folder "public/stylesheets/sass"
folder "app/views/pages"

# You can also create new files with pre-existing content. Suprails looks for
#   the existing file in the folder specified above in sources
# Example:
file "ie.css", "public/stylesheets/"
file "screen.css", "public/stylesheets/"
file "print.css", "public/stylesheets/"
file "default.sass", "public/stylesheets/sass/"
file "application.html.haml", "app/views/layouts/"
file "application_helper.rb", "app/helpers/"
file "hoptoad.rb", "config/initializers"

# You can delete files too
# Example:
# delete "public/index.html"
delete "public/index.html"

# There's a convenience method for the GPL. Because... you know... the GPL
# is good. and stuff. Note: this method accesses the GPL from the net.
# Example:
# gpl

# You can setup your database, too. Unfortunately, this is not yet implemented.
#   Use 'file' to copy your database.yml file instead.
# Examples:
# db.development.adapter :sqlite3
# db.development.db "db/development.sqlite3"
# db.development.timeout 5000
# db.create
# db.migrate

# Rake works too
# Example:
# rake

# Like Git? Set it up!
# Example:
# git
git

# Perhaps you like subversion? Use that instead!
# Example:
# svn

# Need a command not supplied (yet!) by suprails? 
# You can extend it by using runinside
# Example:
runinside "capify ."

# Oh yeah, you can use suprails plugins, too. Except, to prevent confusion with
#   real rails plugins, we call them facets for suprails. They should be
#   installed at:
#     ~/.suprails/facets
# Haml is one such facet. It requires special attention because installing it
#   as a plugin does not complete its installation into the rails app
# Example:
# haml

# Finally, you can save a copy of this configuration file into your rails app's
# doc directory with the 'save' command
# Example:
# save
save